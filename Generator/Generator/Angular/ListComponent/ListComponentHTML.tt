<#@ template language="C#"#>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Common" #>
<#@ assembly name="System.Collections" #> 
<#@ assembly name="Oracle.ManagedDataAccess" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.ComponentModel.Primitives" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Runtime" #>
<#@ import namespace="Oracle.ManagedDataAccess.Client" #>
<#@ parameter name="tableName" type="System.string" #>
<#@ parameter name="columnNameList" type="System.Collections.Generic.List<string>" #>
<#@ parameter name="columnTypeList" type="System.Collections.Generic.List<string>" #>
<#@ parameter name="nullableList" type="System.Collections.Generic.List<string>" #>
<#@ parameter name="dataPrecision" type="System.Collections.Generic.List<string>" #>
<#@ parameter name="dataScale" type="System.Collections.Generic.List<string>" #>
<#@ parameter name="ClassName" type="System.string" #>
<#@ parameter name="ObjectName" type="System.string" #>
<#@ parameter name="AngularFileName" type="System.string" #>
<div class="animated fadeInRightBig container">
    <div class="contentHeader">
        <h1 l10nTranslate>
            <#=ObjectName#>s
            <span class="pull-right">
                <button type="button" (click)="add<#=ClassName#>();" class="btn  btn-primary" l10nTranslate><i class="fa fa-plus"></i> add</button>
            </span>
        </h1>
    </div>


    <div class="wrapper">
        <div class="row">
            <div class="form-group col-md-2 col-xs-12">
                <label for="userName" l10nTranslate><#=ObjectName#>Title</label>
                <input type="text" id="txtUserName" [(ngModel)]="searchText" name="txtTitle" class="form-control">
            </div>
        </div>
        <div class="clearfix"></div>
       
        <div class="form-group ">
            <button class="btn btn-primary" type="button" (click) ="search<#=ClassName#>List()"   l10nTranslate><i class="fa fa-search"></i>search</button>
            <button class="btn btn-default" (click)="reset()" type="button"   l10nTranslate>
                <i class="fa fa-retweet"></i>clear
            </button>
            <div class="clearfix"></div>
        </div>
           
 
        <!-- Table -->
        <div class="box-shadow white-bg p-4 m-b-40">

            <div class="scrollable-area">
                <p-confirmDialog header="Confirmation" icon="pi pi-exclamation-triangle" width="425"> </p-confirmDialog>
                <table class="table table-hover" *ngIf="lst<#=ClassName#>s && lst<#=ClassName#>s.length > 0">
                    <thead>
                        <tr>
<#for(int i=0;i<columnTypeList.Count;i++){
	if(columnNameList[i]!="DELETED_BY" 
		&& columnNameList[i]!="DELETION_DATE"
		&& columnNameList[i]!="MODIFIED_BY"
		&& columnNameList[i]!="MODIFICATION_DATE"
		&& columnNameList[i]!="CREATED_BY"
		&& columnNameList[i]!="CREATION_DATE"
		&& columnNameList[i]!="ACCOUNT_ID"){#>
							<th l10nTranslate>
								<#=GetObjectName(columnNameList[i])#>
							</th><#}}#>
                            <th l10nTranslate>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr *ngFor="let <#=ObjectName#> of lst<#=ClassName#>s | paginate: {
                                                      itemsPerPage: 10,
                                                      currentPage: currentPage,
                                                      totalItems: totalRecord }">
		<#for(int i=0;i<columnTypeList.Count;i++){
		if(columnNameList[i]!="DELETED_BY" 
		&& columnNameList[i]!="DELETION_DATE"
		&& columnNameList[i]!="MODIFIED_BY"
		&& columnNameList[i]!="MODIFICATION_DATE"
		&& columnNameList[i]!="CREATED_BY"
		&& columnNameList[i]!="CREATION_DATE"
		&& columnNameList[i]!="ACCOUNT_ID"){
		if(GetTypeScriptType(columnTypeList[i],dataPrecision[i],dataScale[i]) == "Date"){#>
							<td>{{ <#=ObjectName#>.<#=GetObjectName(columnNameList[i])#> | date:'dd/MM/yyyy' }}</td>
							<#}else{#>
							<td>{{ <#=ObjectName#>.<#=GetObjectName(columnNameList[i])#> }}</td>
							<#}
							}
							}
							#>
                            <td>
                                <div class="pull-right">
                                    <a [routerLink]="['/edit<#=ClassName#>']" [queryParams]="{'id':<#=ObjectName#>.id}" class="btn btn-primary btn-sm"><span class="fa fa-pencil"></span></a>
                                    <a class="btn btn-sm btn-danger" (click)="confirmMessage(<#=ObjectName#>.id)"><span class="fa fa-trash"></span></a>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="row">
                <div class="col-md-6 col-lg-4">
                    <p>Total Records: {{totalRecord}}</p>
                </div>
                <div class="col-md-6 col-lg-4">
                    <pagination-controls (pageChange)="pageChanged($event)" *ngIf="lst<#=ClassName#>s.length > 0"></pagination-controls>
                </div>
                <div class="col-lg-4">
                </div>
                <div class="clearfix"></div>
            </div>
            <div *ngIf="lst<#=ClassName#>s.length < 1" class="alert alert-primary" role="alert" style="color: #004085; background-color: #cce5ff; border-color: #b8daff;" l10nTranslate>
                noRecordFound
            </div>
        </div>
    </div>
</div>
<#+
public string GetTypeScriptType(string dbType,string dataPrecision,string dataScale)
{
    if(dbType=="NUMBER" && string.IsNullOrEmpty(dataPrecision)){
        return "number";
    }else if(dbType=="VARCHAR2"){
        return "string";
    }else if(dbType=="VARCHAR"){
        return "string";
    }else if(dbType=="CHAR"){
        return "string";
    }else if(dbType=="BLOB"){
        return "string";
    }else if(dbType=="CLOB"){
        return "string";
    }else if(dbType=="DATE"){
        return "Date";
    }else if(dbType=="NUMBER" && !string.IsNullOrEmpty(dataPrecision)  && int.Parse(dataPrecision)==1){
        return "boolean";
    }else if(dbType=="NUMBER" && !string.IsNullOrEmpty(dataPrecision)  && int.Parse(dataPrecision)>1 
			&& !string.IsNullOrEmpty(dataScale) && int.Parse(dataPrecision)>0 ){
        return "number";
    }else{
    return dbType;
    }
}
public string GetType(string dbType,string dataPrecision,string dataScale)
{
    if(dbType=="NUMBER" && string.IsNullOrEmpty(dataPrecision)){
        return "int";
    }else if(dbType=="VARCHAR2"){
        return "string";
    }else if(dbType=="VARCHAR"){
        return "string";
    }else if(dbType=="CHAR"){
        return "string";
    }else if(dbType=="DATE"){
        return "DateTime";
    }else if(dbType=="NUMBER" && !string.IsNullOrEmpty(dataPrecision)  && int.Parse(dataPrecision)==1){
        return "bool";
    }else if(dbType=="NUMBER" && !string.IsNullOrEmpty(dataPrecision)  && int.Parse(dataPrecision)>1 
			&& !string.IsNullOrEmpty(dataScale) && int.Parse(dataPrecision)>0 ){
        return "double";
    }else{
    return dbType;
    }
}
public string GetNullableType(string dbType,string dataPrecision,string dataScale)
{
    if(dbType=="NUMBER" && string.IsNullOrEmpty(dataPrecision)){
        return "int?";
    }else if(dbType=="VARCHAR2"){
        return "string";
    }else if(dbType=="VARCHAR"){
        return "string";
    }else if(dbType=="CHAR"){
        return "string";
    }else if(dbType=="DATE"){
        return "DateTime?";
    }else if(dbType=="NUMBER" && !string.IsNullOrEmpty(dataPrecision)  && dataPrecision=="1"){
        return "bool?";
    }else if(dbType=="NUMBER" && !string.IsNullOrEmpty(dataPrecision)  && int.Parse(dataPrecision)>1 
			&& !string.IsNullOrEmpty(dataScale) && int.Parse(dataPrecision)>0 ){
        return "double?";
    }else{
    return dbType;
    }
}
 
public static string GetClassName(string text)
{
    text = ToPascalCase(text);
    if(text.IndexOf('s')==text.Length-1){
        string result = text.Remove(text.LastIndexOf('s'));
        return result;
    }
    return text;
}

public static string ToPascalCase(string text)
{
    string result = text.Split('_').Select(s => char.ToUpperInvariant(s[0]) + s.Substring(1, s.Length - 1).ToLower()).Aggregate(string.Empty, (s1, s2) => s1 + s2); ;
    return result;
}

public static string GetObjectName(string text)
{
    text = ToPascalCase(text);
    text = Char.ToLower(text[0]) + text.Substring(1, text.Length - 1);
    if (text.LastIndexOf('s') == text.Length - 1)
    {
        text = text.Remove(text.LastIndexOf('s'));
    }
    return text;
}
#>